<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 被遗忘的博客</title>
    <link>https://wenchao.ren/tags/linux/</link>
    <description>Recent content in linux on 被遗忘的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 04 Jun 2020 12:21:43 +0000</lastBuildDate><atom:link href="https://wenchao.ren/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>curl常见用例</title>
      <link>https://wenchao.ren/posts/curl%E5%B8%B8%E8%A7%81%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Thu, 04 Jun 2020 12:21:43 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/curl%E5%B8%B8%E8%A7%81%E7%94%A8%E4%BE%8B/</guid>
      <description>整理一下curl的常见用法，避免我用到一些我没记住的用例时在去到处找.
http method curl -XGET http://www.baidu.com curl -XGET &amp;lsquo;http://www.baidu.com?a=b&amp;amp;c=d&#39; curl -XPOST http://www.baidu.com
常见POST JSON POST curl --header &amp;quot;Content-Type: application/json&amp;quot; \ --X POST \ -d &#39;{&amp;quot;username&amp;quot;:&amp;quot;xyz&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;xyz&amp;quot;}&#39; \ http://localhost:3000/api/login  设置cookie
curl -i -H &amp;quot;Application/json&amp;quot; -H &amp;quot;Content-type: application/json&amp;quot; -v --cookie &amp;quot;userName=xxx&amp;quot; -XPOST &#39;http://domain.com&#39; -d &#39; { &amp;quot;code&amp;quot;:&amp;quot;typecode2&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;typename2&amp;quot;, &amp;quot;remark&amp;quot;:&amp;quot;remark&amp;quot;, &amp;quot;structures&amp;quot;:[ { “dimensionType&amp;quot;:2 }, { &amp;quot;dimensionType&amp;quot;: 3 } ] }&#39;  也可以吧body放置在文件中post
curl -d &amp;quot;@data.json&amp;quot; -X POST http://localhost:3000/data  然后data.json文件中写json，比如：
{ &amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot; }  FORM POST application/x-www-form-urlencoded is the default:</description>
    </item>
    
    <item>
      <title>Select、poll、Epoll、KQueue区别</title>
      <link>https://wenchao.ren/posts/selectepollkqueue%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 26 Jul 2019 23:00:48 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/selectepollkqueue%E5%8C%BA%E5%88%AB/</guid>
      <description>在早期的文章《unix IO模型》中我们介绍了5种IO模型，如下图是几种IO模型的对比
从上面的图可以看出，从左到右，越往后，阻塞越少，理论上效率也就越优。
其中Select对应的是第三种IO模型：I/O Multiplexing IO多路复用模型，而epoll与kqueue其实和Select一样也属于I/O Multiplexing IO多路复用模型，只是相比于select来说多了一些高级特性而已，可以看做拥有了第四种模型的某些特性，比如callback的回调机制。
IO多路复用的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll，kqueue这些个function会不断的轮询所负责的所有socket，当某个socket就绪（一般是读就绪或者写就绪），就通知用户进程。
I/O Multiplexing IO多路复用模型 当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。
所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回
更详细的描述可以查看《/unix-IO模型/#I-O-多路复用（-IO-multiplexing）》
Select int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);  select 函数监视的文件描述符分3类，分别是:
 writefds readfds exceptfds  调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。
select的优缺点 优点  跨平台  select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。    缺点  单个进程打开的文件描述是有一定限制的，它由FD_SETSIZE设置，默认值是1024，采用数组存储，虽然可以通过编译内核改变，但相对麻烦。 另外在检查数组中是否有文件描述需要读写时，采用的是线性扫描的方法，即不管这些socket是不是活跃的，我都轮询一遍，所以效率比较低  poll int poll (struct pollfd *fds, unsigned int nfds, int timeout);  不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。
struct pollfd { int fd; /* file descriptor */ short events; /* requested events to watch */ short revents; /* returned events witnessed */ };  pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。</description>
    </item>
    
    <item>
      <title>unix IO模型</title>
      <link>https://wenchao.ren/posts/unix-io%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 29 Mar 2019 00:11:52 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/unix-io%E6%A8%A1%E5%9E%8B/</guid>
      <description>在之前的文章《理解同步、异步、阻塞和非阻塞》我们谈了一下关于同步、异步、阻塞和非阻塞的理解。这篇文章，我打算来谈谈unix的io模型，其中会涉及到下面的内容：
 阻塞 I/O（blocking IO） 非阻塞 I/O（nonblocking IO） I/O 多路复用（ IO multiplexing） 异步 I/O（asynchronous IO） 信号驱动式IO模型(signal-driven IO model)  背景知识 在开始正式的介绍unix的io模型之前，我们需要科普一些背景知识，便于大家正确的理解unix io模型。
同步、异步、阻塞和非阻塞 这些概念请查看我之前的文章《理解同步、异步、阻塞和非阻塞》
文件描述符fd 文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。
文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。
用户空间（user space）与内核空间（kernel space） 学习 Linux 时，经常可以看到两个词：User space（用户空间）和 Kernel space（内核空间）。
简单说，Kernel space 是 Linux 内核的运行空间，User space 是用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响。
Kernel space 可以执行任意命令，调用系统的一切资源；User space 只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（又称 system call），才能向内核发出指令。
str = &amp;quot;my string&amp;quot; // 用户空间 x = x + 2 // 用户空间 file.write(str) // 切换到内核空间 y = x + 4 // 切换回用户空间  上面代码中，第一行和第二行都是简单的赋值运算，在 User space 执行。第三行需要写入文件，就要切换到 Kernel space，因为用户不能直接写文件，必须通过内核安排。第四行又是赋值运算，就切换回 User space。</description>
    </item>
    
    <item>
      <title>linux命令-grep</title>
      <link>https://wenchao.ren/posts/linux%E5%91%BD%E4%BB%A4-grep/</link>
      <pubDate>Mon, 11 Mar 2019 20:50:48 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/linux%E5%91%BD%E4%BB%A4-grep/</guid>
      <description>常见参数说明 grep [OPTIONS] PATTERN [FILE...] grep [OPTIONS] [-e PATTERN]... [-f FILE]... [FILE...] OPTIONS: -e: 使用正则搜索 -i: 不区分大小写 -v: 查找不包含指定内容的行 -w: 按单词搜索 -c: 统计匹配到的次数 -n: 显示行号 -r: 逐层遍历目录查找 -A: 显示匹配行及前面多少行, 如: -A3, 则表示显示匹配行及前3行 -B: 显示匹配行及后面多少行, 如: -B3, 则表示显示匹配行及后3行 -C: 显示匹配行前后多少行, 如: -C3, 则表示显示批量行前后3行 --color: 匹配到的内容高亮显示 --include: 指定匹配的文件类型 --exclude: 过滤不需要匹配的文件类型  常见用法 #多文件查询 grep leo logs.log logs_back.log #查找即包含leo又包含li的行 grep leo logs.log | grep li #查找匹配leo或者匹配li的行 grep leo | li logs.log #显示匹配行前2行 grep leo logs.</description>
    </item>
    
    <item>
      <title>Linux查看端口占用情况</title>
      <link>https://wenchao.ren/posts/linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</link>
      <pubDate>Thu, 14 Feb 2019 23:10:41 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</guid>
      <description>排查问题的时候，可能需要知道这个端口目前被哪个服务占用着，在linux中，一般会用到lsof和netstat这2个命令。比如检查80端口的占用情况
lsof [root@VM_43_49_centos ~]# sudo lsof -i:80 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME nginx 5358 root 6u IPv4 236554022 0t0 TCP *:http (LISTEN) nginx 5358 root 7u IPv6 236554023 0t0 TCP *:http (LISTEN) nginx 28325 nginx 6u IPv4 236554022 0t0 TCP *:http (LISTEN) nginx 28325 nginx 7u IPv6 236554023 0t0 TCP *:http (LISTEN)  netstat [root@VM_43_49_centos ~]# sudo netstat -tunlp | grep 80 tcp 0 0 0.0.0.0:80 0.</description>
    </item>
    
    <item>
      <title>terminal快捷键</title>
      <link>https://wenchao.ren/posts/terminal%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 11 Feb 2019 17:21:47 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/terminal%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>终端跳转解说图 常用快捷键 编辑  Ctrl + a – 跳到行首 Ctrl + e – 跳到行尾 Ctrl + k – 删除当前光标至行尾内容 Ctrl + u – 删除当前光标至行首内容 Ctrl + w – 删除当前光标至词首内容 Ctrl + y – 将剪切的内容粘贴在光标后 Ctrl + xx – 在行首和当前光标处(来回)移动 Alt + b – 跳到词首 Alt + f – 跳到词尾 Alt + d – 删除自光标处起的单词内容 Alt + c – 大写光标处的字符（注：该条内容与原文不同） Alt + u – 大写自光标处起的单词内容 Alt + l – 小写自光标处起的单词内容 Alt + t – 将光标处单词与上一个词交换 Ctrl + f – 向前移动一个字符(相当于按向左箭头) Ctrl + b – 向后移动一个字符(相当于按向右箭头) Ctrl + d – 删除光标后一个字符（相当于按Delete） Ctrl + h – 删除光标前一个字符（相当于按后退键） Ctrl + t – 交换光标处的两个字符  搜索  Ctrl + r – 反向搜索历史命令 Ctrl + g – 退出历史搜索模式（相当于按Esc） Ctrl + p – 上一个历史命令（相当于按向上箭头） Ctrl + n – 下一个历史命令（相当于按向下箭头） Alt + .</description>
    </item>
    
    <item>
      <title>ApacheBench ab压测工具</title>
      <link>https://wenchao.ren/posts/apachebench-ab%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 17 Jan 2019 13:15:30 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/apachebench-ab%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>ab简介 ApacheBench 是 Apache服务器自带的一个web压力测试工具，简称ab。ab又是一个命令行工具，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力。
安装ab sudo apt-get install apache2-utils  参数列表 Usage: ab [options] [http[s]://]hostname[:port]/path Options are: -n requests Number of requests to perform //请求链接数 -c concurrency Number of multiple requests to make at a time //表示并发数 -t timelimit Seconds to max. to spend on benchmarking This implies -n 50000 -s timeout Seconds to max. wait for each response Default is 30 seconds -b windowsize Size of TCP send/receive buffer, in bytes -B address Address to bind to when making outgoing connections -p postfile File containing data to POST.</description>
    </item>
    
  </channel>
</rss>
