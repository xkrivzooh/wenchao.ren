<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 被遗忘的博客</title>
    <link>https://wenchao.ren/tags/mysql/</link>
    <description>Recent content in mysql on 被遗忘的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Sep 2019 20:25:45 +0000</lastBuildDate><atom:link href="https://wenchao.ren/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库MHA架构介绍</title>
      <link>https://wenchao.ren/posts/%E6%95%B0%E6%8D%AE%E5%BA%93mha%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 23 Sep 2019 20:25:45 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/%E6%95%B0%E6%8D%AE%E5%BA%93mha%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本人youshimaton开发，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能最大程度上保证数据库的一致性。
适用场景 目前MHA主要支持一主多从的架构，要搭建MHA，要求一个复制集群必须最少有3台数据库服务器，一主二从，即一台充当Master，一台充当备用Master，另一台充当从库。出于成本考虑，淘宝在此基础上进行了改造，目前淘宝开发的TMHA已经支持一主一从。
MAH组件 MHA由两部分组成：
 MHA Manager（管理节点） MHA Node（数据节点）。  MHA Manager MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。主要用来运行一些工具，比如masterha_manager工具实现自动监控MySQL Master和实现master故障切换，其它工具实现手动实现master故障切换、在线mater转移、连接检查等等。一个Manager可以管理多 个master-slave集群
MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。
MHA Node MHA Node运行在每台MySQL服务器上，类似于Agent。主要作用有：
 保存二进制日志 如果能够访问故障master，会拷贝master的二进制日志 应用差异中继日志 从拥有最新数据的slave上生成差异中继日志，然后应用差异日志。 清除中继日志 在不停止SQL线程的情况下删除中继日志  工作原理简述 因为MHA Manager会不断的去探测master节点，因此当master出现故障时，通过对比slave之间I/O线程读取masterbinlog的位置，选取最接近的slave做为latestslave。 其它slave通过与latest slave对比生成差异中继日志。在latest slave上应用从master保存的binlog，同时将latest slave提升为master。最后在其它slave上应用相应的差异中继日志并开始从新的master开始复制。
在MHA实现Master故障切换过程中，MHA Node会试图访问故障的master（通过SSH），如果可以访问（不是硬件故障，比如InnoDB数据文件损坏等），会保存二进制文件，以最大程度保 证数据不丢失。MHA和半同步复制一起使用会大大降低数据丢失的危险。流程如下：
 从宕机崩溃的master保存二进制日志事件(binlog events)。 识别含有最新更新的slave。 应用差异的中继日志(relay log)到其它slave。 应用从master保存的二进制日志事件(binlog events)。 提升一个slave为新master并记录binlog file和position。 使其它的slave连接新的master进行复制。 完成切换manager主进程OFFLINE  </description>
    </item>
    
    <item>
      <title>pt-fingerprint 安装和基本使用</title>
      <link>https://wenchao.ren/posts/pt-fingerprint-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Sep 2019 19:23:41 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/pt-fingerprint-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>sudo wget percona.com/get/percona-toolkit.tar.gz ## 安装相关依赖 sudo yum install perl -y sudo yum install perl-DBI -y sudo yum install perl-DBD-MySQL -y sudo yum install perl-Time-HiRes -y sudo yum install perl-IO-Socket-SSL -y sudo yum install perl-Digest-MD5.x86_64 -y  初步使用
[$ /home/w/percona/percona-toolkit-3.0.13/bin]$ ./pt-fingerprint --query &amp;quot;select a, b, c from users where id = 500&amp;quot; select a, b, c from users where id = ? [$ /home/w/percona/percona-toolkit-3.0.13/bin]$ ./pt-fingerprint --query &amp;quot;update test set a =1 , b=2 where id = 3&amp;quot; update test set a =?</description>
    </item>
    
    <item>
      <title>mysql binlog初步介绍</title>
      <link>https://wenchao.ren/posts/mysql-binlog%E5%88%9D%E6%AD%A5%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 11 Mar 2019 12:24:56 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/mysql-binlog%E5%88%9D%E6%AD%A5%E4%BB%8B%E7%BB%8D/</guid>
      <description>binlog 即二进制日志,它记录了数据库上的所有改变，并以二进制的形式保存在磁盘中； 它可以用来查看数据库的变更历史、数据库增量备份和恢复、Mysql的复制（主从数据库的复制）。
mysql binlog解析 binlog有三种格式:
 Statement 基于SQL语句的复制(statement-based replication,SBR)， Row 基于行的复制(row-based replication,RBR)， Mixed 混合模式复制(mixed-based replication,MBR)。  在我这边mysql 5.7.20版本中默认是使用Row的, 而且默认情况下没有开启binlog
mysql&amp;gt; select version(); +-----------+ | version() | +-----------+ | 5.7.20 | +-----------+ 1 row in set (0.00 sec) mysql&amp;gt; mysql&amp;gt; mysql&amp;gt; show variables like &#39;binlog_format&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | binlog_format | ROW | +---------------+-------+ 1 row in set (0.00 sec) mysql&amp;gt; show variables like &#39;log_bin&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | log_bin | OFF | +---------------+-------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>ERROR 1728 (HY000): Cannot load from mysql.procs_priv. The table is probably corrupted</title>
      <link>https://wenchao.ren/posts/error-1728-hy000-cannot-load-from-mysql-procs-priv-the-table-is-probably-corrupted/</link>
      <pubDate>Mon, 11 Mar 2019 12:23:46 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/error-1728-hy000-cannot-load-from-mysql-procs-priv-the-table-is-probably-corrupted/</guid>
      <description>今天在搞mysql binlog收集时，需要创建一个mysql用户，结果出现了：
ERROR 1728 (HY000): Cannot load from mysql.procs_priv. The table is probably corrupted异常
解决办法:
sudo mysql_upgrade -u root -p
注意后面的用户名和密码自己修改为自己的哈。
~ » sudo mysql_upgrade -u root -p Password: Enter password: Checking if update is needed. Checking server version. Running queries to upgrade MySQL server. Checking system database. mysql.columns_priv OK mysql.db OK mysql.engine_cost OK mysql.event OK mysql.func OK mysql.general_log OK mysql.gtid_executed OK mysql.help_category OK mysql.help_keyword OK mysql.help_relation OK mysql.help_topic OK mysql.</description>
    </item>
    
    <item>
      <title>mysql sleep</title>
      <link>https://wenchao.ren/posts/mysql-sleep/</link>
      <pubDate>Mon, 11 Mar 2019 12:17:55 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/mysql-sleep/</guid>
      <description>今天看到了一个sql：
select count(*), sleep(5) from test  第一次看到这个sleep函数，所以专门研究了一波。这个函数的语法是：SLEEP(duration), 其中duration的单位是秒
 Sleeps (pauses) for the number of seconds given by the duration argument, then returns 0. The duration may have a fractional part. If the argument is NULL or negative, SLEEP() produces a warning, or an error in strict SQL mode.
  When sleep returns normally (without interruption), it returns 0:
 简单的说他可以让sql在执行的时候sleep一段时间。
mysql&amp;gt; SELECT SLEEP(1000); +-------------+ | SLEEP(1000) | +-------------+ | 0 | +-------------+  When SLEEP() is the only thing invoked by a query that is interrupted, it returns 1 and the query itself returns no error.</description>
    </item>
    
  </channel>
</rss>
