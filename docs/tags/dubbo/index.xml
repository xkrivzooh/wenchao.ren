<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dubbo on 被遗忘的博客</title>
    <link>https://wenchao.ren/tags/dubbo/</link>
    <description>Recent content in dubbo on 被遗忘的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 May 2020 12:23:53 +0000</lastBuildDate><atom:link href="https://wenchao.ren/tags/dubbo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dubbo对异常的一些处理</title>
      <link>https://wenchao.ren/posts/dubbo%E5%AF%B9%E5%BC%82%E5%B8%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 29 May 2020 12:23:53 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo%E5%AF%B9%E5%BC%82%E5%B8%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86/</guid>
      <description>看了一下这个文章《Dubbo如何处理业务异常，这个一定要知道哦》，但是不赞同文章中的一些论点，这里整理一下dubbo源码中Provider端的ExceptionFilter中 对异常的处理逻辑。
在Dubbo的provider端的com.alibaba.dubbo.rpc.filter.ExceptionFilter中，有如下几个规则：
 如果是checked异常，直接抛出 在方法签名上有声明，直接抛出, 未在方法签名上定义的异常，在Provider端打印ERROR日志 异常类和接口类在同一jar包里，直接抛出 是JDK自带（以java.或者javax.开头）的异常，直接抛出 是Dubbo本身的异常（RpcException），直接抛出 如果以上几个规则都不满足的话，则将异常包装为RuntimeException抛给Consumer端  其中一个比较有意思的点就是如何根据一个class判断他所属的jar：
在ExceptionFilter中的逻辑是如下的：
// 异常类和接口类在同一jar包里，直接抛出 String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface()); String exceptionFile = ReflectUtils.getCodeBase(exception.getClass()); if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)){ return result; }  其中 ReflectUtils.getCodeBase的代码如下：
public static String getCodeBase(Class&amp;lt;?&amp;gt; cls) { if (cls == null) return null; ProtectionDomain domain = cls.getProtectionDomain(); if (domain == null) return null; CodeSource source = domain.getCodeSource(); if (source == null) return null; URL location = source.</description>
    </item>
    
    <item>
      <title>dubbo源码解析系列</title>
      <link>https://wenchao.ren/posts/dubbo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/</link>
      <pubDate>Sat, 21 Dec 2019 01:35:19 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/</guid>
      <description>这个是dubbo源码解析系列的目录，不定时更新&amp;hellip;</description>
    </item>
    
    <item>
      <title>dubbo xml解析</title>
      <link>https://wenchao.ren/posts/dubbo-xml%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 08 Aug 2019 00:46:01 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo-xml%E8%A7%A3%E6%9E%90/</guid>
      <description>在之前的文章《如何在spring中自定义xml标签并解析》中我用实际的例子展示了，如何在spring中自定义xml标签，同时如何解析这个xml标签。
本篇文章主要来看看dubbo中对应的源代码
如上图所示，这些类就是dubbo解析xml的相关实现的核心类，核心原理已经在之前的文章中详细描述了，如果大家在阅读dubbo代码，想看某个element的解析类的话，可以在DubboNamespaceHandler中来找：
public class DubboNamespaceHandler extends NamespaceHandlerSupport { static { Version.checkDuplicate(DubboNamespaceHandler.class); } @Override public void init() { registerBeanDefinitionParser(&amp;quot;application&amp;quot;, new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser(&amp;quot;module&amp;quot;, new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser(&amp;quot;registry&amp;quot;, new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser(&amp;quot;config-center&amp;quot;, new DubboBeanDefinitionParser(ConfigCenterBean.class, true)); registerBeanDefinitionParser(&amp;quot;metadata-report&amp;quot;, new DubboBeanDefinitionParser(MetadataReportConfig.class, true)); registerBeanDefinitionParser(&amp;quot;monitor&amp;quot;, new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser(&amp;quot;metrics&amp;quot;, new DubboBeanDefinitionParser(MetricsConfig.class, true)); registerBeanDefinitionParser(&amp;quot;provider&amp;quot;, new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser(&amp;quot;consumer&amp;quot;, new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser(&amp;quot;protocol&amp;quot;, new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser(&amp;quot;service&amp;quot;, new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser(&amp;quot;reference&amp;quot;, new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser(&amp;quot;annotation&amp;quot;, new AnnotationBeanDefinitionParser()); } }  基本上就是一个xml element对应一个BeanDefinitionParser</description>
    </item>
    
    <item>
      <title>dubbo 线程模型</title>
      <link>https://wenchao.ren/posts/dubbo-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 07 Aug 2019 12:04:36 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>dubbo的线程模型设计的算是非常不错的了，值得我们学习。下图是dubbo的线程模型图：
IO线程和业务线程的选择原则 在官方文档中，对于线程模型的选择说的比较清楚：
 如果事件处理的逻辑能迅速完成，并且不会发起新的 IO 请求，比如只是在内存中记个标识，则直接在 IO 线程上处理更快，因为减少了线程池调度。 但如果事件处理逻辑较慢，或者需要发起新的 IO 请求，比如需要查询数据库，则必须派发到线程池，否则 IO 线程阻塞，将导致不能接收其它请求。如果用 IO 线程处理事件，又在事件处理过程中发起新的 IO 请求，比如在连接事件中发起登录请求，会报“可能引发死锁”异常，但不会真死锁。  我们平时在编写代码的时候，也需要遵循这个大原则。
dubbo的线程模型配置起来也是比较简单的：
&amp;lt;dubbo:protocol name=&amp;quot;dubbo&amp;quot; dispatcher=&amp;quot;all&amp;quot; threadpool=&amp;quot;fixed&amp;quot; threads=&amp;quot;100&amp;quot; /&amp;gt;  比如上面的配置中，dubbo协议使用了all Dispatcher，内部使用固定100大小的线程池。
根据上面的线程模型图来看，当dubbo provider收到dubbo consumer的请求以后，会通过Dispather模块来进行请求分发，在这个Dispather模块中决定了dubbo的部分功能使用哪个线程池。然后在ThreadPool模块中提供了好几个线程池实现。基本上算是覆盖到了绝大多数场景。
dubbo Dispatcher分类  all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。 direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。 message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。 execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。 connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。  默认情况下的dispatcher为all，这样的话可以尽可能的提示吞吐量。
dubbo的ThreadPool  fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省) cached 缓存线程池，空闲一分钟自动删除，需要时重建。 limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。 eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)  从dispatcher和threadpool模块可以看出，dubbo之所以搞这么多dispatcher和threadpool的实现，就是基于线程模型的选择大原则，使得可以针对不同的业务场景，业务使用方可以自主选择不同的实现。从这一点上来说，作为一个rpc框架，dubbo在这方面的考量和实现算是非常不错的了。
源码阅读 dubbo的线程模型相关的代码，我们从org.apache.dubbo.remoting.transport.netty4.NettyServer这个类开始看，在NettyServer中：</description>
    </item>
    
    <item>
      <title>dubbo-SPI扩展(二)</title>
      <link>https://wenchao.ren/posts/dubbo-spi%E6%89%A9%E5%B1%95%E4%BA%8C/</link>
      <pubDate>Wed, 13 Feb 2019 19:26:39 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo-spi%E6%89%A9%E5%B1%95%E4%BA%8C/</guid>
      <description>本篇文章主要描述一下dubbo的扩展点中的一些基本概念和常见的一些注解
基本概念 扩展点(Extension Point) 扩展点其实就是一个Java的接口。比如dubbo中的LoadBalance接口其实就是一个扩展点
@SPI(RandomLoadBalance.NAME) public interface LoadBalance { @Adaptive(&amp;quot;loadbalance&amp;quot;) &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; select(List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, URL url, Invocation invocation) throws RpcException; }  扩展(Extension) 扩展其实扩展点的实现类。比如以扩展点LoadBalance来说，RandomLoadBalance其实就是他的一个实现类，也是一个扩展。
package org.apache.dubbo.rpc.cluster.loadbalance; import org.apache.dubbo.common.URL; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Invoker; import java.util.List; import java.util.concurrent.ThreadLocalRandom; /** * random load balance. * */ public class RandomLoadBalance extends AbstractLoadBalance { public static final String NAME = &amp;quot;random&amp;quot;; @Override protected &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; doSelect(List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, URL url, Invocation invocation) { int length = invokers.</description>
    </item>
    
    <item>
      <title>dubbo-SPI扩展(一)</title>
      <link>https://wenchao.ren/posts/dubbo-spi%E6%89%A9%E5%B1%95%E4%B8%80/</link>
      <pubDate>Wed, 13 Feb 2019 14:11:24 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo-spi%E6%89%A9%E5%B1%95%E4%B8%80/</guid>
      <description>本篇文章描述一下dubbo的扩展性实现，主要有下面几个部分：
 什么叫可扩展性 常见的扩展性的解决方案 java spi简介 为什么dubbo不采用java spi，而是自己实现一个SPI机制呢 dubbo spi基本使用 dubbo扩展点的基本概念 dubbo SPI源码阅读  本篇文章也参考了很多业界资料，详见文件结尾
什么叫可扩展性 如同罗马不是一天建成的，任何系统都一定是从小系统不断发展成为大系统的，想要从一开始就把系统设计的足够完善是不可能的，相反的，我们应该关注当下的需求，然后再不断地对系统进行迭代。在代码层面，要求我们适当的对关注点进行抽象和隔离，在软件不断添加功能和特性时，依然能保持良好的结构和可维护性，同时允许第三方开发者对其功能进行扩展。在某些时候，软件设计者对扩展性的追求甚至超过了性能。
在谈到软件设计时，可扩展性一直被谈起，那到底什么才是可扩展性，什么样的框架才算有良好的可扩展性呢？它必须要做到以下两点:
 作为框架的维护者，在添加一个新功能时，只需要添加一些新代码，而不用大量的修改现有的代码，即符合开闭原则。 作为框架的使用者，在添加一个新功能时，不需要去修改框架的源码，在自己的工程中添加代码即可。  Dubbo很好的做到了上面两点。这要得益于Dubbo的微内核+插件的机制。接下来的章节中我们会慢慢揭开Dubbo扩展机制的神秘面纱。
常见的扩展性的解决方案  Factory模式 IoC容器 OSGI容器  Dubbo作为一个框架，不希望强依赖其他的IoC容器，比如Spring，Guice。OSGI也是一个很重的实现，不适合Dubbo。最终Dubbo的实现参考了Java原生的SPI机制，但对其进行了一些扩展，以满足Dubbo的需求。
java spi简介 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。
本节通过一个示例演示 Java SPI 的使用方法。首先，我们定义一个接口，名称为 Robot。
public interface Robot { void sayHello(); }  接下来定义两个实现类，分别为 OptimusPrime 和 Bumblebee。
public class OptimusPrime implements Robot { @Override public void sayHello() { System.out.println(&amp;quot;Hello, I am Optimus Prime.</description>
    </item>
    
    <item>
      <title>dubbo自定义filter</title>
      <link>https://wenchao.ren/posts/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89filter/</link>
      <pubDate>Tue, 12 Feb 2019 17:50:57 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89filter/</guid>
      <description>dubbo的扩展性是特别的好，本篇文章通过例子来说明如何自定义dubbo的filter。为了文章完整性，贴一下官网对于filter的一些说明。
扩展说明 服务提供方和服务消费方调用过程拦截，Dubbo 本身的大多功能均基于此扩展点实现，每次远程方法执行，该拦截都会被执行，请注意对性能的影响。
约定：
 用户自定义 filter 默认在内置 filter 之后。 特殊值 default，表示缺省扩展点插入的位置。比如：filter=&amp;quot;xxx,default,yyy&amp;quot;，表示 xxx`` 在缺省 filter 之前，yyy在缺省filter` 之后。 特殊符号 -，表示剔除。比如：filter=&amp;quot;-foo1&amp;quot;，剔除添加缺省扩展点 foo1。比如：filter=&amp;quot;-default&amp;quot;，剔除添加所有缺省扩展点。 provider 和 service 同时配置的 filter 时，累加所有 filter，而不是覆盖。比如：&amp;lt;dubbo:provider filter=&amp;quot;xxx,yyy&amp;quot;/&amp;gt; 和 &amp;lt;dubbo:service filter=&amp;quot;aaa,bbb&amp;quot; /&amp;gt;，则 xxx,yyy,aaa,bbb 均会生效。如果要覆盖，需配置：&amp;lt;dubbo:service filter=&amp;quot;-xxx,-yyy,aaa,bbb&amp;quot; /&amp;gt;  扩展接口 org.apache.dubbo.rpc.Filter
扩展配置 &amp;lt;!-- 消费方调用过程拦截 --&amp;gt; &amp;lt;dubbo:reference filter=&amp;quot;xxx,yyy&amp;quot; /&amp;gt; &amp;lt;!-- 消费方调用过程缺省拦截器，将拦截所有reference --&amp;gt; &amp;lt;dubbo:consumer filter=&amp;quot;xxx,yyy&amp;quot;/&amp;gt; &amp;lt;!-- 提供方调用过程拦截 --&amp;gt; &amp;lt;dubbo:service filter=&amp;quot;xxx,yyy&amp;quot; /&amp;gt; &amp;lt;!-- 提供方调用过程缺省拦截器，将拦截所有service --&amp;gt; &amp;lt;dubbo:provider filter=&amp;quot;xxx,yyy&amp;quot;/&amp;gt;  已知扩展  org.apache.dubbo.rpc.filter.EchoFilter org.apache.dubbo.rpc.filter.GenericFilter org.apache.dubbo.rpc.filter.GenericImplFilter org.apache.dubbo.rpc.filter.TokenFilter org.</description>
    </item>
    
    <item>
      <title>本地搭建dubbo的运行环境</title>
      <link>https://wenchao.ren/posts/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAdubbo%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 23 Jan 2019 00:11:34 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAdubbo%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</guid>
      <description>本篇文章主要讲述如何在本地搭建dubbo的运行环境
安装zk dubbo推荐使用zk来作为自己的注册中心，当然使用其余的实现来作为注册中心也是可以的。比如我之前就使用redis实现了一个注册中心。
Dubbo 未对 Zookeeper 服务器端做任何侵入修改，只需安装原生的 Zookeeper 服务器即可， 所有注册中心逻辑适配都在调用 Zookeeper 客户端时完成。
安装zk：
wget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz tar zxvf zookeeper-3.3.3.tar.gz cd zookeeper-3.3.3 cp conf/zoo_sample.cfg conf/zoo.cfg  配置:
vi conf/zoo.cfg  如果不需要集群，zoo.cfg 的内容如下 ：
tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181  如果需要集群，zoo.cfg 的内容如下(其中 data 目录和 server 地址需改成你真实部署机器的信息)
tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 server.1=10.20.153.10:2555:3555 server.2=10.20.153.11:2555:3555  并在 data 目录下放置 myid 文件：
mkdir data vi myid  myid 指明自己的 id，对应上面 zoo.cfg 中 server. 后的数字，第一台的内容为 1，第二台的内容为 2，内容如下：</description>
    </item>
    
  </channel>
</rss>
