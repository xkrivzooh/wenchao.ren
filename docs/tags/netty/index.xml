<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>netty on 被遗忘的博客</title>
    <link>https://wenchao.ren/tags/netty/</link>
    <description>Recent content in netty on 被遗忘的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 03 Jun 2020 21:15:38 +0000</lastBuildDate><atom:link href="https://wenchao.ren/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不在要Netty的Pinple的线程中乱设置拒绝策略</title>
      <link>https://wenchao.ren/posts/%E4%B8%8D%E5%9C%A8%E8%A6%81netty%E7%9A%84pinple%E7%9A%84%E7%BA%BF%E7%A8%8B%E4%B8%AD%E4%B9%B1%E8%AE%BE%E7%BD%AE%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 03 Jun 2020 21:15:38 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/%E4%B8%8D%E5%9C%A8%E8%A6%81netty%E7%9A%84pinple%E7%9A%84%E7%BA%BF%E7%A8%8B%E4%B8%AD%E4%B9%B1%E8%AE%BE%E7%BD%AE%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/</guid>
      <description>之前给业务同学排查问题时发现我们的Trace服务的某个地方当Trace的量特别大时，一个线程池会对业务层抛出RejectedExecutionException， 于是热心的我就顺手给这个地方加了一个RejectedExecutionHandler的实现，在这个里面加一个监控，然后就没了。这样是没问题的，但是 「手贱」的我看到本文件中另外一个地方的线程池也没有设置拒绝策略。他之前的代码如下：
String name = nettyClientConfig.getString(nameKey); String workerExecutorName = StringUtils.hasText(name) ? String.format(&amp;quot;%s.NettyClientCodecThread&amp;quot;, name) : &amp;quot;NettyClientCodecThread&amp;quot;; ThreadFactory threadFactory = new DefaultThreadFactory(workerExecutorName, false); this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(threadSize, threadFactory);  我修改之后为：
String name = nettyClientConfig.getString(nameKey); String workerExecutorName = StringUtils.hasText(name) ? String.format(&amp;quot;%s.NettyClientCodecThread&amp;quot;, name) : &amp;quot;NettyClientCodecThread&amp;quot;; ThreadFactory threadFactory = new NamedThreadFactory(workerExecutorName, false); int maxPendingTasks = nettyClientConfig.getInteger(maxPendingTasksKey, 100); this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(threadSize, threadFactory, maxPendingTasks, (task, executor) -&amp;gt; Metrics.counter(&amp;quot;NettyClientCodecThread.rejected.counter&amp;quot;).get().inc());  心想着老子又做了一回活雷锋。但是后来这个改动坑了一波，因为这个defaultEventExecutorGroup线程池是在Netty的pipeline中使用的：
Bootstrap handler = this.bootstrap.group(this.eventLoopGroupSelector).channel(useEpoll() ? EpollSocketChannel.</description>
    </item>
    
    <item>
      <title>从Netty的ResourceLeakDetector#Lavel的设计的一些感想</title>
      <link>https://wenchao.ren/posts/%E4%BB%8Enetty%E7%9A%84resourceleakdetector-lavel%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</link>
      <pubDate>Wed, 03 Jun 2020 00:37:35 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/%E4%BB%8Enetty%E7%9A%84resourceleakdetector-lavel%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</guid>
      <description>Netty中的ResourceLeakDetector#Level有4个级别：
 DISABLED 这种模式下不进行泄露监控。 SIMPLE 这种模式下以1/128的概率抽取ByteBuf进行泄露监控。 ADVANCED 在SIMPLE的基础上，每一次对ByteBuf的调用都会尝试记录调用轨迹，消耗较大 PARANOID 在ADVANCED的基础上，对每一个ByteBuf都进行泄露监控，消耗最大。  一般而言，在项目的初期使用SIMPLE模式进行监控，如果没有问题一段时间后就可以关闭。否则升级到ADVANCED或者PARANOID模式尝试确认泄露位置。
结合自己做中间件开发的一些感触吧：
 client端新增加的功能，最好都有一个对应的开关，便于出问题的时候及时调整，给自己留个后路 client的功能尽量支持动态升级和降级，非核心功能不要影响业务功能，分清楚主次。 client端的功能代码必要的时候一定需要辅有排查问题的辅助代码 非核心功能，能异步就异步，尽可能快，异步处理的时候，尤其是异步回调的时候，一定要风清楚代码是在哪个线程池中执行的。  </description>
    </item>
    
    <item>
      <title>Netty如何检测ByteBuf没有release</title>
      <link>https://wenchao.ren/posts/netty%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8Bbytebuf%E6%B2%A1%E6%9C%89release/</link>
      <pubDate>Mon, 01 Jun 2020 23:31:56 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/netty%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8Bbytebuf%E6%B2%A1%E6%9C%89release/</guid>
      <description>Netty中的ByteBuf算是中间件开发中比较常用的API了，一般我们会使用PooledByteBuf来提升性能，但是这个玩意需要我们使用以后手动进行release，如果有时候忘记手动释放的话，会出现内存泄漏。 而且这种问题一般也没那么方便的排查。不过非常幸运的是Netty已经帮我们考虑到了这个问题，它提供了自己的检测工具:
 ResourceLeakDetector ResourceLeakTracker  基本思想 他的实现原理很巧妙，不过我们先不着急说Netty的实现，我们先想想如果我们自己来弄，我们一般会面临下面3个问题：
 被检测的对象创建的时候，我们就需要知道他创建了，然后做一些操作，比如该标记就标记，该计数就计数， 对象「无用」的时候，我们也需要知道这个时刻。这里的「无用」一般我们选择对象被GC时 我们还需要一种机制来判断对象在被GC之前有没有调用某个操作，比如release或者close操作。  下面以netty 4.0.46版本来说哈。
 第一个问题其实很好实现，在对象的构造函数中我们就可以做这些事情，因为对象的构造函数执行的时候，就是他被创建的时候 第二个问题，Netty是利用了Java中的java.lang.ref.PhantomReference和引用队列这个东西。java.lang.ref.PhantomReference有叫虚引用也有叫做幽灵引用的，叫法无所谓，它和软引用（SoftReference）、弱引用（WeakReference）不同，它并不影响对象的生命周期，如果一个对象与java.lang.ref.PhantomReference关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。而且除过强引用之外，剩余的3种引用类型都有一个引用队列可以与之配合。当java清理调用不必要的引用后，会将这个引用本身（不是引用指向的值对象）添加到队列之中。比如你看PhantomReference的定义：  package java.lang.ref; /** * Phantom reference objects, which are enqueued after the collector * determines that their referents may otherwise be reclaimed. Phantom * references are most often used for scheduling pre-mortem cleanup actions in * a more flexible way than is possible with the Java finalization mechanism. * * &amp;lt;p&amp;gt; If the garbage collector determines at a certain point in time that the * referent of a phantom reference is &amp;lt;a * href=&amp;quot;package-summary.</description>
    </item>
    
  </channel>
</rss>
