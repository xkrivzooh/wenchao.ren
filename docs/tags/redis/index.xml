<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on 被遗忘的博客</title>
    <link>https://wenchao.ren/tags/redis/</link>
    <description>Recent content in redis on 被遗忘的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 03 Jun 2020 00:21:22 +0000</lastBuildDate><atom:link href="https://wenchao.ren/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lettuce一定要打开redis集群拓扑刷新功能</title>
      <link>https://wenchao.ren/posts/lettuce%E4%B8%80%E5%AE%9A%E8%A6%81%E6%89%93%E5%BC%80redis%E9%9B%86%E7%BE%A4%E6%8B%93%E6%89%91%E5%88%B7%E6%96%B0%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 03 Jun 2020 00:21:22 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/lettuce%E4%B8%80%E5%AE%9A%E8%A6%81%E6%89%93%E5%BC%80redis%E9%9B%86%E7%BE%A4%E6%8B%93%E6%89%91%E5%88%B7%E6%96%B0%E5%8A%9F%E8%83%BD/</guid>
      <description>在使用Lettuce访问Redis的时候，一定要记得打开它的Redis 集群拓扑刷新功能，否则他压根就不存在高可用。因为他的集群拓扑刷新功能是默认没开启的。
 RedisCluster集群模式下master宕机主从切换期间Lettuce连接Redis无法使用报错Redis command timed out的问题 SpringBoot2.X与redis Lettuce集成踩坑 SpringBoot2.1.X使用Redis连接池Lettuce踩坑  上面的3个文章其实说的就是这个事情，在redis集群拓扑结构发生变化，比如Redis的master挂掉了后，lettuce的client端就会长时间不能恢复。因此可以通过下面的配置打开拓扑刷新功能：
//默认超时时间, lettuce默认超时时间为60s太长了，此处默认设置为15s private Long timeoutInMillis = Duration.ofSeconds(15).toMillis(); static ClusterClientOptions.Builder initDefaultClusterClientOptions(ClusterClientOptions.Builder builder) { ClusterTopologyRefreshOptions defaultClusterTopologyRefreshOptions = ClusterTopologyRefreshOptions.builder() //开启集群拓扑结构周期性刷新，和默认参数保持一致 .enablePeriodicRefresh(60, TimeUnit.SECONDS) //开启针对{@link RefreshTrigger}中所有类型的事件的触发器 .enableAllAdaptiveRefreshTriggers() //和默认一样，30s超时，避免短时间大量出现刷新拓扑的事件 .adaptiveRefreshTriggersTimeout(30, TimeUnit.SECONDS) //和默认一样重连5次先，然后在刷新集群拓扑 .refreshTriggersReconnectAttempts(5) .build(); return builder // 配置用于开启自适应刷新和定时刷新。如自适应刷新不开启，Redis集群变更时将会导致连接异常 .topologyRefreshOptions(defaultClusterTopologyRefreshOptions) //默认就是重连的，显示定义一下 .autoReconnect(true) //和默认一样最大重定向5次，避免极端情况无止境的重定向 .maxRedirects(5) //Accept commands when auto-reconnect is enabled, reject commands when auto-reconnect is disabled. .disconnectedBehavior(ClientOptions.DisconnectedBehavior.DEFAULT) .socketOptions(SocketOptions.builder().keepAlive(true).tcpNoDelay(true).build()) //取消校验集群节点的成员关系 .validateClusterNodeMembership(false); } public static ClusterClientOptions.Builder getDefaultClusterClientOptionBuilder() { return initDefaultClusterClientOptions(ClusterClientOptions.</description>
    </item>
    
    <item>
      <title>redis Pipeline</title>
      <link>https://wenchao.ren/posts/redis-pipeline/</link>
      <pubDate>Wed, 31 Jul 2019 12:42:29 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/redis-pipeline/</guid>
      <description>在基于request-response的请求模型中，一般都会涉及下面几个阶段：
 client发送命令 命令在网络上传输 server收到命令并开始执行 server返回结果  在这个过程中我们可以看到有2次网络传输，而这两次网络传输的耗时成为：RTT (Round Trip Time)。例如，如果 RTT 时间是250毫秒（网络连接很慢的情况下）， 即使服务端每秒能处理100k的请求量，那我们每秒最多也只能处理4个请求。如果使用的是本地环回接口，RTT 就短得多，但如如果需要连续执行多次写入，这也是一笔很大的开销。下面的图是传统的 N次request-response的交互图：
 一般情况下我们为了解决rtt耗时太长的问题，会采样批处理的解决方案，也就是将请求参数批量发给server端，server端处理完这些请求以后，在一次性返回结果。
 在redis中，已经提供了一些批量操作命令，比如mget，mset等命令。但是也有不少命令是没有批量操作命令的，但是为了解决这个问题，redis支持Pipeline。
Pipeline 并不是一种新的技术或机制，很多技术上都使用过。RTT 在不同网络环境下会不同，例如同机房和同机房会比较快，跨机房跨地区会比较慢。Redis 很早就支持 Pipeline 技术，因此无论你运行的是什么版本，你都可以使用 Pipeline 操作 Redis。如果客户端和服务端的网络延时越大，那么Pipeline的效果越明显。
Pipeline 能将一组 Redis 命令进行组装，通过一次 RTT 传输给 Redis，再将这组 Redis 命令按照顺序执行并将结果返回给客户端。上图没有使用 Pipeline 执行了 N 条命令，整个过程需要 N 次 RTT。下图为使用 Pipeline 执行 N 条命令，整个过程仅需要 1 次 RTT：
Pipeline 基本使用 我比较喜欢用的lettuce中对pipeline的使用方式（Asynchronous Pipelining）如下：
StatefulRedisConnection&amp;lt;String, String&amp;gt; connection = client.connect(); RedisAsyncCommands&amp;lt;String, String&amp;gt; commands = connection.async(); // disable auto-flushing commands.setAutoFlushCommands(false); // perform a series of independent calls List&amp;lt;RedisFuture&amp;lt;?</description>
    </item>
    
    <item>
      <title>redisson redlock代码阅读</title>
      <link>https://wenchao.ren/posts/redisson-redlock%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 29 Jul 2019 12:15:16 +0000</pubDate>
      
      <guid>https://wenchao.ren/posts/redisson-redlock%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
      <description>本文章未完，待续
redisson redlock基本使用 RLock lock1 = redissonInstance1.getLock(&amp;quot;lock1&amp;quot;); RLock lock2 = redissonInstance2.getLock(&amp;quot;lock2&amp;quot;); RLock lock3 = redissonInstance3.getLock(&amp;quot;lock3&amp;quot;); RedissonRedLock lock = new RedissonRedLock(lock1, lock2, lock3); // 同时加锁：lock1 lock2 lock3 // 红锁在大部分节点上加锁成功就算成功。 lock.lock(); ... lock.unlock();  另外Redisson还通过加锁的方法提供了leaseTime的参数来指定加锁的时间。超过这个时间后锁便自动解开了。
RedissonRedLock lock = new RedissonRedLock(lock1, lock2, lock3); // 给lock1，lock2，lock3加锁，如果没有手动解开的话，10秒钟后将会自动解开 lock.lock(10, TimeUnit.SECONDS); // 为加锁等待100秒时间，并在加锁成功10秒钟后自动解开 boolean res = lock.tryLock(100, 10, TimeUnit.SECONDS); ... lock.unlock();  源码阅读 RedissonRedLock类继承了RedissonMultiLock，基于redlock算法，这个类重写了RedissonMultiLock的failedLocksLimit和calcLockWaitTime方法
public class RedissonRedLock extends RedissonMultiLock { /** * Creates instance with multiple {@link RLock} objects.</description>
    </item>
    
  </channel>
</rss>
